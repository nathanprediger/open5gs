apiVersion: v1
kind: Service
metadata:
  name: open5gs-upf-1
  namespace: nrprediger
  labels:
    epc-mode: upf
    prometheus: open5gs-monitor
spec:
  selector:
    epc-mode: upf
  ports:
    - name: http2-80
      protocol: TCP
      port: 80
      targetPort: 80
    - name: udp-2152
      protocol: UDP
      port: 2152
      targetPort: 2152
    - name: udp-8805
      protocol: UDP
      port: 8805
      targetPort: 8805
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: open5gs-upf-1
  namespace: nrprediger
  labels:
    epc-mode: upf
    prometheus: open5gs-monitor
spec:
  replicas: 1
  selector:
    matchLabels:
      epc-mode: upf
  template:
    metadata:
      labels:
        epc-mode: upf
        app: open5gs-upf
        prometheus: open5gs-monitor
        version: 2.7.5
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      containers:
        - name: upf-1
          image: gradiant/open5gs:2.7.5
          #imagePullPolicy: Always
          ports:
            - name: http2-80
              protocol: TCP
              containerPort: 80
            - name: udp-2152
              protocol: UDP
              containerPort: 2152
            - name: udp-8805
              protocol: UDP
              containerPort: 8805
          securityContext:
            privileged: true
            capabilities:
              add: ["NET_ADMIN", "SYS_MODULE"]
          volumeMounts:
            - name: open5gs-upf-config
              mountPath: /open5gs/config-map/upf.yaml
              subPath: "upf.yaml"
            - name: "dev-net-tun"
              mountPath: "/dev/net/tun" # Needed for VPN
            - name: open5gs-upf-config
              mountPath: /bin/entrypoint.sh
              subPath: entrypoint.sh
          command: ["/bin/entrypoint.sh"]
      volumes:
        - name: open5gs-upf-config
          configMap:
            name: open5gs-upf-config
            defaultMode: 0777
        - name: dev-net-tun
          hostPath:
            path: /dev/net/tun
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-upf-config
  namespace: nrprediger
  labels:
    epc-mode: upf
data:
  upf.yaml: |-
    logger:
      path:
        file: /opt/open5gs/var/log/open5gs/upf.log

    global:
      max:
        ue: 5000  # The number of UE can be increased depending on memory size.
    #    peer: 64

    #  <PFCP Server>
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    upf:
      pfcp:
        server:
          - dev: eth0
        client:
          smf:
            - address: open5gs-smf
      gtpu:
        server:
          - dev: eth0
      metrics:
        server:
          - address: 0.0.0.0
            port: 9090
      session:
        - subnet: 10.45.0.0/16
          gateway: 10.45.0.1
          dnn: default
          dev: ogstun     

  entrypoint.sh: |-
    #!/bin/bash
    set -e

    echo "Executing k8s customized entrypoint.sh"
    #echo "Creating net device {{ .dev }}"
    if grep "ogstun" /proc/net/dev > /dev/null; then
      echo "[WARNING] Net device ogstun already exists!"
      ip addr add 10.45.0.1/16 dev ogstun || true
      ip link set ogstun up
    else 
      echo "[INFO] Create device ogstun!"
      ip tuntap add name ogstun mode tun
      ip addr add 10.45.0.1/16 dev ogstun || true
      ip link set ogstun up
    fi

    # echo "Config tun"
    # ip tuntap add name ogstun mode tun
    # ip addr add 192.168.0.1/16 dev ogstun 
    # ip link set ogstun up

    # if grep "slice01" /proc/net/dev > /dev/null; then
    #   echo "[WARNING] Net device slice01 already exists!"
    #   ip addr add 10.41.0.1/16 dev slice01 || true
    #   ip link set slice01 up
    # else 
    #   echo "[INFO] Create device slice01 !"
    #   ip tuntap add name slice01 mode tun
    #   ip addr add 10.41.0.1/16 dev slice01 || true
    #   ip link set slice01 up
    # fi

    echo "[INFO] Config sysctl"
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1

    echo "Enable NAT"
    iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

    open5gs-upfd -c /open5gs/config-map/upf.yaml
